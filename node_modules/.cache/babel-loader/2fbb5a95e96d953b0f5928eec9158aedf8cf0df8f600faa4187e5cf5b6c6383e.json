{"ast":null,"code":"var _jsxFileName = \"/home/prince/Desktop/roxiler/src/Components/TransactionTable.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import TransactionStatistics from './TransactionStatistics';\n// import TransactionBarChart from './TransactionBarChart';\n\n// const TransactionTable = () => {\n//     const [transactions, setTransactions] = useState([]);\n//     const [selectedMonth, setSelectedMonth] = useState('March');\n//     const [searchTerm, setSearchTerm] = useState('');\n//     const [page, setPage] = useState(1);\n//     const transactionsPerPage = 3;\n\n//     useEffect(() => {\n//         fetchTransactions();\n//     }, [selectedMonth, searchTerm, page]);\n\n//     const fetchTransactions = async () => {\n//         const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/roxiler?month=${selectedMonth}&page=${page}&search=${searchTerm}`);\n//         const data = await response.json();\n//         setTransactions(data);\n//     };\n\n//     const handleSearch = (event) => {\n//         setSearchTerm(event.target.value);\n//         setPage(1); // Reset to first page on new search\n//     };\n\n//     const handleMonthChange = (event) => {\n//         setSelectedMonth(event.target.value);\n//         setPage(1); // Reset to first page on month change\n//     };\n\n//     const renderTransactions = () => {\n//         const startIndex = (page - 1) * transactionsPerPage;\n//         const endIndex = startIndex + transactionsPerPage;\n//         return transactions.slice(startIndex, endIndex).map(transaction => (\n//             <tr key={transaction.id}>\n//                 <td>{transaction.id}</td>\n//                 <td>{transaction.title}</td>\n//                 <td>{transaction.description}</td>\n//                 <td>{transaction.price}</td>\n//                 <td>{transaction.category}</td>\n//                 <td>{transaction.sold}</td>\n//                 <td><img src={transaction.image} alt={transaction.title} width=\"50\" /></td>\n//             </tr>\n//         ));\n//     };\n\n//     return (\n//         <div>\n//             <h2>Transaction Dashboard</h2>\n//             <div>\n//                 <input\n//                     type=\"text\"\n//                     placeholder=\"Search transaction\"\n//                     value={searchTerm}\n//                     onChange={handleSearch}\n//                 />\n//                 <select value={selectedMonth} onChange={handleMonthChange}>\n//                     {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(month => (\n//                         <option key={month} value={month}>{month}</option>\n//                     ))}\n//                 </select>\n//             </div>\n//             <TransactionStatistics selectedMonth={selectedMonth} />\n//             <TransactionBarChart selectedMonth={selectedMonth} />\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>ID</th>\n//                         <th>Title</th>\n//                         <th>Description</th>\n//                         <th>Price</th>\n//                         <th>Category</th>\n//                         <th>Sold</th>\n//                         <th>Image</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {renderTransactions()}\n//                 </tbody>\n//             </table>\n//             <div>\n//                 <button onClick={() => setPage(page > 1 ? page - 1 : 1)}>Previous</button>\n//                 <span>Page No: {page}</span>\n//                 <button onClick={() => setPage(page + 1)}>Next</button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default TransactionTable;\nimport React, { useState, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionDashboard = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [selectedMonth, setSelectedMonth] = useState('March');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [page, setPage] = useState(1);\n  const transactionsPerPage = 3;\n  const [hasNextPage, setHasNextPage] = useState(true);\n  const [stats, setStats] = useState({\n    totalSale: 0,\n    totalSoldItems: 0,\n    totalNotSoldItems: 0\n  });\n  useEffect(() => {\n    fetchTransactions();\n    fetchStatistics();\n  }, [selectedMonth, searchTerm, page]);\n  const fetchTransactions = async () => {\n    const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/roxiler?month=${selectedMonth}&page=${page}&search=${searchTerm}`);\n    const data = await response.json();\n    setTransactions(data);\n    // Check if there are more transactions beyond the current page\n    setHasNextPage(data.length === transactionsPerPage);\n  };\n  const fetchStatistics = async () => {\n    const response = await fetch(`https://api.example.com/transactions/chart?month=${selectedMonth}`);\n    const data = await response.json();\n    setStats(data);\n    // Render chart once statistics are fetched\n    renderChart(data);\n  };\n  const handleSearch = event => {\n    setSearchTerm(event.target.value);\n    setPage(1); // Reset to first page on new search\n  };\n  const handleMonthChange = event => {\n    setSelectedMonth(event.target.value);\n    setPage(1); // Reset to first page on month change\n  };\n  const renderTransactions = () => {\n    const startIndex = (page - 1) * transactionsPerPage;\n    const endIndex = startIndex + transactionsPerPage;\n    return transactions.slice(startIndex, endIndex).map(transaction => /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: transaction.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: transaction.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: transaction.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: transaction.price\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: transaction.category\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: transaction.sold\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: transaction.image,\n          alt: transaction.title,\n          width: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this)]\n    }, transaction.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this));\n  };\n  const renderChart = statsData => {\n    const ctx = document.getElementById('transactionChart');\n    new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: ['Total Sale', 'Total Sold Items', 'Total Not Sold Items'],\n        datasets: [{\n          label: `Statistics for ${selectedMonth}`,\n          data: [statsData.totalSale, statsData.totalSoldItems, statsData.totalNotSoldItems],\n          backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)'],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Transaction Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search transaction\",\n        value: searchTerm,\n        onChange: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedMonth,\n        onChange: handleMonthChange,\n        children: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(month => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: month,\n          children: month\n        }, month, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"transactionChart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Sold\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: renderTransactions()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPage(page > 1 ? page - 1 : 1),\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Page No: \", page]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPage(page + 1),\n        disabled: !hasNextPage,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 9\n  }, this);\n};\n_s(TransactionDashboard, \"HncUX8iryw4pHoAAQBoCtGdUcXc=\");\n_c = TransactionDashboard;\nexport default TransactionDashboard;\nvar _c;\n$RefreshReg$(_c, \"TransactionDashboard\");","map":{"version":3,"names":["React","useState","useEffect","Chart","jsxDEV","_jsxDEV","TransactionDashboard","_s","transactions","setTransactions","selectedMonth","setSelectedMonth","searchTerm","setSearchTerm","page","setPage","transactionsPerPage","hasNextPage","setHasNextPage","stats","setStats","totalSale","totalSoldItems","totalNotSoldItems","fetchTransactions","fetchStatistics","response","fetch","data","json","length","renderChart","handleSearch","event","target","value","handleMonthChange","renderTransactions","startIndex","endIndex","slice","map","transaction","children","id","fileName","_jsxFileName","lineNumber","columnNumber","title","description","price","category","sold","src","image","alt","width","statsData","ctx","document","getElementById","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero","placeholder","onChange","month","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/prince/Desktop/roxiler/src/Components/TransactionTable.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import TransactionStatistics from './TransactionStatistics';\n// import TransactionBarChart from './TransactionBarChart';\n\n// const TransactionTable = () => {\n//     const [transactions, setTransactions] = useState([]);\n//     const [selectedMonth, setSelectedMonth] = useState('March');\n//     const [searchTerm, setSearchTerm] = useState('');\n//     const [page, setPage] = useState(1);\n//     const transactionsPerPage = 3;\n\n//     useEffect(() => {\n//         fetchTransactions();\n//     }, [selectedMonth, searchTerm, page]);\n\n//     const fetchTransactions = async () => {\n//         const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/roxiler?month=${selectedMonth}&page=${page}&search=${searchTerm}`);\n//         const data = await response.json();\n//         setTransactions(data);\n//     };\n\n//     const handleSearch = (event) => {\n//         setSearchTerm(event.target.value);\n//         setPage(1); // Reset to first page on new search\n//     };\n\n//     const handleMonthChange = (event) => {\n//         setSelectedMonth(event.target.value);\n//         setPage(1); // Reset to first page on month change\n//     };\n\n//     const renderTransactions = () => {\n//         const startIndex = (page - 1) * transactionsPerPage;\n//         const endIndex = startIndex + transactionsPerPage;\n//         return transactions.slice(startIndex, endIndex).map(transaction => (\n//             <tr key={transaction.id}>\n//                 <td>{transaction.id}</td>\n//                 <td>{transaction.title}</td>\n//                 <td>{transaction.description}</td>\n//                 <td>{transaction.price}</td>\n//                 <td>{transaction.category}</td>\n//                 <td>{transaction.sold}</td>\n//                 <td><img src={transaction.image} alt={transaction.title} width=\"50\" /></td>\n//             </tr>\n//         ));\n//     };\n\n//     return (\n//         <div>\n//             <h2>Transaction Dashboard</h2>\n//             <div>\n//                 <input\n//                     type=\"text\"\n//                     placeholder=\"Search transaction\"\n//                     value={searchTerm}\n//                     onChange={handleSearch}\n//                 />\n//                 <select value={selectedMonth} onChange={handleMonthChange}>\n//                     {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(month => (\n//                         <option key={month} value={month}>{month}</option>\n//                     ))}\n//                 </select>\n//             </div>\n//             <TransactionStatistics selectedMonth={selectedMonth} />\n//             <TransactionBarChart selectedMonth={selectedMonth} />\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>ID</th>\n//                         <th>Title</th>\n//                         <th>Description</th>\n//                         <th>Price</th>\n//                         <th>Category</th>\n//                         <th>Sold</th>\n//                         <th>Image</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {renderTransactions()}\n//                 </tbody>\n//             </table>\n//             <div>\n//                 <button onClick={() => setPage(page > 1 ? page - 1 : 1)}>Previous</button>\n//                 <span>Page No: {page}</span>\n//                 <button onClick={() => setPage(page + 1)}>Next</button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default TransactionTable;\nimport React, { useState, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\n\nconst TransactionDashboard = () => {\n    const [transactions, setTransactions] = useState([]);\n    const [selectedMonth, setSelectedMonth] = useState('March');\n    const [searchTerm, setSearchTerm] = useState('');\n    const [page, setPage] = useState(1);\n    const transactionsPerPage = 3;\n    const [hasNextPage, setHasNextPage] = useState(true);\n    const [stats, setStats] = useState({ totalSale: 0, totalSoldItems: 0, totalNotSoldItems: 0 });\n\n    useEffect(() => {\n        fetchTransactions();\n        fetchStatistics();\n    }, [selectedMonth, searchTerm, page]);\n\n    const fetchTransactions = async () => {\n        const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/roxiler?month=${selectedMonth}&page=${page}&search=${searchTerm}`);\n        const data = await response.json();\n        setTransactions(data);\n        // Check if there are more transactions beyond the current page\n        setHasNextPage(data.length === transactionsPerPage);\n    };\n\n    const fetchStatistics = async () => {\n        const response = await fetch(`https://api.example.com/transactions/chart?month=${selectedMonth}`);\n        const data = await response.json();\n        setStats(data);\n        // Render chart once statistics are fetched\n        renderChart(data);\n    };\n\n    const handleSearch = (event) => {\n        setSearchTerm(event.target.value);\n        setPage(1); // Reset to first page on new search\n    };\n\n    const handleMonthChange = (event) => {\n        setSelectedMonth(event.target.value);\n        setPage(1); // Reset to first page on month change\n    };\n\n    const renderTransactions = () => {\n        const startIndex = (page - 1) * transactionsPerPage;\n        const endIndex = startIndex + transactionsPerPage;\n        return transactions.slice(startIndex, endIndex).map(transaction => (\n            <tr key={transaction.id}>\n                <td>{transaction.id}</td>\n                <td>{transaction.title}</td>\n                <td>{transaction.description}</td>\n                <td>{transaction.price}</td>\n                <td>{transaction.category}</td>\n                <td>{transaction.sold}</td>\n                <td><img src={transaction.image} alt={transaction.title} width=\"50\" /></td>\n            </tr>\n        ));\n    };\n\n    const renderChart = (statsData) => {\n        const ctx = document.getElementById('transactionChart');\n        new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: ['Total Sale', 'Total Sold Items', 'Total Not Sold Items'],\n                datasets: [{\n                    label: `Statistics for ${selectedMonth}`,\n                    data: [statsData.totalSale, statsData.totalSoldItems, statsData.totalNotSoldItems],\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    };\n\n    return (\n        <div>\n            <h2>Transaction Dashboard</h2>\n            <div>\n                <input\n                    type=\"text\"\n                    placeholder=\"Search transaction\"\n                    value={searchTerm}\n                    onChange={handleSearch}\n                />\n                <select value={selectedMonth} onChange={handleMonthChange}>\n                    {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(month => (\n                        <option key={month} value={month}>{month}</option>\n                    ))}\n                </select>\n            </div>\n            <div>\n                <canvas id=\"transactionChart\"></canvas>\n            </div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>Title</th>\n                        <th>Description</th>\n                        <th>Price</th>\n                        <th>Category</th>\n                        <th>Sold</th>\n                        <th>Image</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {renderTransactions()}\n                </tbody>\n            </table>\n            <div>\n                <button onClick={() => setPage(page > 1 ? page - 1 : 1)}>Previous</button>\n                <span>Page No: {page}</span>\n                <button onClick={() => setPage(page + 1)} disabled={!hasNextPage}>Next</button>\n            </div>\n        </div>\n    );\n};\n\nexport default TransactionDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}