{"ast":null,"code":"var _jsxFileName = \"/home/prince/Desktop/roxiler/src/Components/TransactionStatistics.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n\n// const TransactionStatistics = ({ selectedMonth }) => {\n//     const [stats, setStats] = useState({ totalSale: 0, totalSoldItems: 0, totalNotSoldItems: 0 });\n//     useEffect(() => {\n//         const fetchStatistics = async () => {\n//             try {\n//                 const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/chart?month=${selectedMonth}`);\n\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch statistics');\n//                 }\n\n//                 const data = await response.json();\n//                 setStats(data);\n//             } catch (error) {\n//                 // Handle fetch error\n//                 console.error('Error fetching statistics:', error);\n//                 // Set default statistics or handle error state accordingly\n//                 setStats({ totalSale: 0, totalSoldItems: 0, totalNotSoldItems: 0 });\n//             }\n//         };\n\n//         fetchStatistics();\n//     }, [selectedMonth]);\n\n//     return (\n//         <div>\n//             <h3>Statistics - {selectedMonth}</h3>\n//             <p>Total sale: {stats.totalSale}</p>\n//             <p>Total sold items: {stats.totalSoldItems}</p>\n//             <p>Total not sold items: {stats.totalNotSoldItems}</p>\n//         </div>\n//     );\n// };\n\n// export default TransactionStatistics;\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartComponent = () => {\n  _s();\n  const [selectedMonth, setSelectedMonth] = useState('');\n  const [chartData, setChartData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (selectedMonth) {\n      fetchChartData(selectedMonth);\n    }\n  }, [selectedMonth]);\n  const fetchChartData = async month => {\n    setLoading(true);\n    try {\n      const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/chart?month=${month}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch data');\n      }\n      const data = await response.json();\n      setChartData(data);\n      setLoading(false);\n    } catch (error) {\n      setError('Error fetching chart data');\n      setLoading(false);\n    }\n  };\n  const handleMonthChange = event => {\n    setSelectedMonth(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedMonth,\n      onChange: handleMonthChange,\n      children: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(month => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: month,\n        children: month\n      }, month, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Chart Data for \", selectedMonth]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Sale: \", chartData.totalSale]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Sold Items: \", chartData.totalSoldItems]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Not Sold Items: \", chartData.totalNotSoldItems]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartComponent, \"w7dp7cuN+oxRVAhPJbFoDeBwkTo=\");\n_c = ChartComponent;\nexport default ChartComponent;\nvar _c;\n$RefreshReg$(_c, \"ChartComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ChartComponent","_s","selectedMonth","setSelectedMonth","chartData","setChartData","loading","setLoading","error","setError","fetchChartData","month","response","fetch","ok","Error","data","json","handleMonthChange","event","target","value","children","onChange","map","fileName","_jsxFileName","lineNumber","columnNumber","totalSale","totalSoldItems","totalNotSoldItems","_c","$RefreshReg$"],"sources":["/home/prince/Desktop/roxiler/src/Components/TransactionStatistics.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n\n// const TransactionStatistics = ({ selectedMonth }) => {\n//     const [stats, setStats] = useState({ totalSale: 0, totalSoldItems: 0, totalNotSoldItems: 0 });\n//     useEffect(() => {\n//         const fetchStatistics = async () => {\n//             try {\n//                 const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/chart?month=${selectedMonth}`);\n                \n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch statistics');\n//                 }\n                \n//                 const data = await response.json();\n//                 setStats(data);\n//             } catch (error) {\n//                 // Handle fetch error\n//                 console.error('Error fetching statistics:', error);\n//                 // Set default statistics or handle error state accordingly\n//                 setStats({ totalSale: 0, totalSoldItems: 0, totalNotSoldItems: 0 });\n//             }\n//         };\n    \n//         fetchStatistics();\n//     }, [selectedMonth]);\n    \n\n//     return (\n//         <div>\n//             <h3>Statistics - {selectedMonth}</h3>\n//             <p>Total sale: {stats.totalSale}</p>\n//             <p>Total sold items: {stats.totalSoldItems}</p>\n//             <p>Total not sold items: {stats.totalNotSoldItems}</p>\n//         </div>\n//     );\n// };\n\n// export default TransactionStatistics;\nimport React, { useState, useEffect } from 'react';\n\nconst ChartComponent = () => {\n  const [selectedMonth, setSelectedMonth] = useState('');\n  const [chartData, setChartData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (selectedMonth) {\n      fetchChartData(selectedMonth);\n    }\n  }, [selectedMonth]);\n\n  const fetchChartData = async (month) => {\n    setLoading(true);\n    try {\n      const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/chart?month=${month}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch data');\n      }\n      const data = await response.json();\n      setChartData(data);\n      setLoading(false);\n    } catch (error) {\n      setError('Error fetching chart data');\n      setLoading(false);\n    }\n  };\n\n  const handleMonthChange = (event) => {\n    setSelectedMonth(event.target.value);\n  };\n\n  return (\n    <div>\n      <select value={selectedMonth} onChange={handleMonthChange}>\n                    {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(month => (\n                        <option key={month} value={month}>{month}</option>\n                    ))}\n                </select>\n\n      {loading && <p>Loading...</p>}\n      {error && <p>{error}</p>}\n      \n      {chartData && (\n        <div>\n          <h2>Chart Data for {selectedMonth}</h2>\n          <p>Total Sale: {chartData.totalSale}</p>\n          <p>Total Sold Items: {chartData.totalSoldItems}</p>\n          <p>Total Not Sold Items: {chartData.totalNotSoldItems}</p>\n          {/* Render your chart here using chartData */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChartComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}