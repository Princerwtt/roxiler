{"ast":null,"code":"var _jsxFileName = \"/home/prince/Desktop/roxiler/src/Components/TransactionBarChart.js\",\n  _s = $RefreshSig$();\n// // src/components/TransactionBarChart.js\n// import React, { useEffect, useState } from 'react';\n// import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\n// const TransactionBarChart = ({ selectedMonth }) => {\n//     const [chartData, setChartData] = useState([]);\n\n//     useEffect(() => {\n//         fetchChartData();\n//     }, [selectedMonth]);\n\n//     const fetchChartData = async () => {\n//         const response = await fetch(`https://api.example.com/transactions/chart?month=${selectedMonth}`);\n//         const data = await response.json();\n//         setChartData(data);\n//     };\n\n//     return (\n//         <div>\n//             <h3>Bar Chart Stats - {selectedMonth}</h3>\n//             <ResponsiveContainer width=\"100%\" height={300}>\n//                 <BarChart data={chartData}>\n//                     <CartesianGrid strokeDasharray=\"3 3\" />\n//                     <XAxis dataKey=\"priceRange\" />\n//                     <YAxis />\n//                     <Tooltip />\n//                     <Bar dataKey=\"count\" fill=\"#8884d8\" />\n//                 </BarChart>\n//             </ResponsiveContainer>\n//         </div>\n//     );\n// };\n\n// export default TransactionBarChart;\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionBarChart = ({\n  selectedMonth\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    fetchChartData();\n  }, [selectedMonth]);\n  const fetchChartData = async () => {\n    try {\n      const response = await fetch(`https://api.example.com/transactions/chart?month=${selectedMonth}`);\n      const data = await response.json();\n      // Assuming the response has the necessary chart data\n      setChartData({\n        labels: data.labels,\n        datasets: [{\n          label: 'Transactions',\n          backgroundColor: 'rgba(75,192,192,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 1,\n          data: data.values\n        }]\n      });\n    } catch (error) {\n      console.error('Error fetching chart data:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Transaction Bar Chart - \", selectedMonth]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n_s(TransactionBarChart, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = TransactionBarChart;\nexport default TransactionBarChart;\nvar _c;\n$RefreshReg$(_c, \"TransactionBarChart\");","map":{"version":3,"names":["React","useState","useEffect","Bar","jsxDEV","_jsxDEV","TransactionBarChart","selectedMonth","_s","chartData","setChartData","fetchChartData","response","fetch","data","json","labels","datasets","label","backgroundColor","borderColor","borderWidth","values","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","options","scales","yAxes","ticks","beginAtZero","_c","$RefreshReg$"],"sources":["/home/prince/Desktop/roxiler/src/Components/TransactionBarChart.js"],"sourcesContent":["// // src/components/TransactionBarChart.js\n// import React, { useEffect, useState } from 'react';\n// import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\n// const TransactionBarChart = ({ selectedMonth }) => {\n//     const [chartData, setChartData] = useState([]);\n\n//     useEffect(() => {\n//         fetchChartData();\n//     }, [selectedMonth]);\n\n//     const fetchChartData = async () => {\n//         const response = await fetch(`https://api.example.com/transactions/chart?month=${selectedMonth}`);\n//         const data = await response.json();\n//         setChartData(data);\n//     };\n\n//     return (\n//         <div>\n//             <h3>Bar Chart Stats - {selectedMonth}</h3>\n//             <ResponsiveContainer width=\"100%\" height={300}>\n//                 <BarChart data={chartData}>\n//                     <CartesianGrid strokeDasharray=\"3 3\" />\n//                     <XAxis dataKey=\"priceRange\" />\n//                     <YAxis />\n//                     <Tooltip />\n//                     <Bar dataKey=\"count\" fill=\"#8884d8\" />\n//                 </BarChart>\n//             </ResponsiveContainer>\n//         </div>\n//     );\n// };\n\n// export default TransactionBarChart;\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nconst TransactionBarChart = ({ selectedMonth }) => {\n    const [chartData, setChartData] = useState({});\n\n    useEffect(() => {\n        fetchChartData();\n    }, [selectedMonth]);\n\n    const fetchChartData = async () => {\n        try {\n            const response = await fetch(`https://api.example.com/transactions/chart?month=${selectedMonth}`);\n            const data = await response.json();\n            // Assuming the response has the necessary chart data\n            setChartData({\n                labels: data.labels,\n                datasets: [\n                    {\n                        label: 'Transactions',\n                        backgroundColor: 'rgba(75,192,192,1)',\n                        borderColor: 'rgba(0,0,0,1)',\n                        borderWidth: 1,\n                        data: data.values\n                    }\n                ]\n            });\n        } catch (error) {\n            console.error('Error fetching chart data:', error);\n        }\n    };\n\n    return (\n        <div>\n            <h3>Transaction Bar Chart - {selectedMonth}</h3>\n            <Bar\n                data={chartData}\n                options={{\n                    scales: {\n                        yAxes: [{\n                            ticks: {\n                                beginAtZero: true\n                            }\n                        }]\n                    }\n                }}\n            />\n        </div>\n    );\n};\n\nexport default TransactionBarChart;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,mBAAmB,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACZS,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,CAACJ,aAAa,CAAC,CAAC;EAEnB,MAAMI,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oDAAoDN,aAAa,EAAE,CAAC;MACjG,MAAMO,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC;MACAL,YAAY,CAAC;QACTM,MAAM,EAAEF,IAAI,CAACE,MAAM;QACnBC,QAAQ,EAAE,CACN;UACIC,KAAK,EAAE,cAAc;UACrBC,eAAe,EAAE,oBAAoB;UACrCC,WAAW,EAAE,eAAe;UAC5BC,WAAW,EAAE,CAAC;UACdP,IAAI,EAAEA,IAAI,CAACQ;QACf,CAAC;MAET,CAAC,CAAC;IACN,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACtD;EACJ,CAAC;EAED,oBACIlB,OAAA;IAAAoB,QAAA,gBACIpB,OAAA;MAAAoB,QAAA,GAAI,0BAAwB,EAAClB,aAAa;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChDxB,OAAA,CAACF,GAAG;MACAW,IAAI,EAAEL,SAAU;MAChBqB,OAAO,EAAE;QACLC,MAAM,EAAE;UACJC,KAAK,EAAE,CAAC;YACJC,KAAK,EAAE;cACHC,WAAW,EAAE;YACjB;UACJ,CAAC;QACL;MACJ;IAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACrB,EAAA,CA9CIF,mBAAmB;AAAA6B,EAAA,GAAnB7B,mBAAmB;AAgDzB,eAAeA,mBAAmB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}