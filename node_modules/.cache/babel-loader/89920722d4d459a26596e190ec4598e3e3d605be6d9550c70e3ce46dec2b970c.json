{"ast":null,"code":"var _jsxFileName = \"/home/prince/Desktop/roxiler/src/Components/TransactionTable.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from 'react';\n// // import TransactionStatistics from './TransactionStatistics';\n// // import TransactionBarChart from './TransactionBarChart';\n\n// // const TransactionTable = () => {\n// //     const [transactions, setTransactions] = useState([]);\n// //     const [selectedMonth, setSelectedMonth] = useState('March');\n// //     const [searchTerm, setSearchTerm] = useState('');\n// //     const [page, setPage] = useState(1);\n// //     const transactionsPerPage = 3;\n\n// //     useEffect(() => {\n// //         fetchTransactions();\n// //     }, [selectedMonth, searchTerm, page]);\n\n// //     const fetchTransactions = async () => {\n// //         const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/roxiler?month=${selectedMonth}&page=${page}&search=${searchTerm}`);\n// //         const data = await response.json();\n// //         setTransactions(data);\n// //     };\n\n// //     const handleSearch = (event) => {\n// //         setSearchTerm(event.target.value);\n// //         setPage(1); // Reset to first page on new search\n// //     };\n\n// //     const handleMonthChange = (event) => {\n// //         setSelectedMonth(event.target.value);\n// //         setPage(1); // Reset to first page on month change\n// //     };\n\n// //     const renderTransactions = () => {\n// //         const startIndex = (page - 1) * transactionsPerPage;\n// //         const endIndex = startIndex + transactionsPerPage;\n// //         return transactions.slice(startIndex, endIndex).map(transaction => (\n// //             <tr key={transaction.id}>\n// //                 <td>{transaction.id}</td>\n// //                 <td>{transaction.title}</td>\n// //                 <td>{transaction.description}</td>\n// //                 <td>{transaction.price}</td>\n// //                 <td>{transaction.category}</td>\n// //                 <td>{transaction.sold}</td>\n// //                 <td><img src={transaction.image} alt={transaction.title} width=\"50\" /></td>\n// //             </tr>\n// //         ));\n// //     };\n\n// //     return (\n// //         <div>\n// //             <h2>Transaction Dashboard</h2>\n// //             <div>\n// //                 <input\n// //                     type=\"text\"\n// //                     placeholder=\"Search transaction\"\n// //                     value={searchTerm}\n// //                     onChange={handleSearch}\n// //                 />\n// //                 <select value={selectedMonth} onChange={handleMonthChange}>\n// //                     {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(month => (\n// //                         <option key={month} value={month}>{month}</option>\n// //                     ))}\n// //                 </select>\n// //             </div>\n// //             <TransactionStatistics selectedMonth={selectedMonth} />\n// //             <TransactionBarChart selectedMonth={selectedMonth} />\n// //             <table>\n// //                 <thead>\n// //                     <tr>\n// //                         <th>ID</th>\n// //                         <th>Title</th>\n// //                         <th>Description</th>\n// //                         <th>Price</th>\n// //                         <th>Category</th>\n// //                         <th>Sold</th>\n// //                         <th>Image</th>\n// //                     </tr>\n// //                 </thead>\n// //                 <tbody>\n// //                     {renderTransactions()}\n// //                 </tbody>\n// //             </table>\n// //             <div>\n// //                 <button onClick={() => setPage(page > 1 ? page - 1 : 1)}>Previous</button>\n// //                 <span>Page No: {page}</span>\n// //                 <button onClick={() => setPage(page + 1)}>Next</button>\n// //             </div>\n// //         </div>\n// //     );\n// // };\n\n// // export default TransactionTable;\n\n// import React, { useState, useEffect } from 'react';\n// import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\n// const TransactionDashboard = () => {\n//     const [transactions, setTransactions] = useState([]);\n//     const [selectedMonth, setSelectedMonth] = useState('March');\n//     const [searchTerm, setSearchTerm] = useState('');\n//     const [page, setPage] = useState(1);\n//     const [stats, setStats] = useState({ totalSale: 0, totalSoldItems: 0, totalNotSoldItems: 0 });\n//     const [chartData, setChartData] = useState([]);\n//     const transactionsPerPage = 3;\n\n//     useEffect(() => {\n//         fetchTransactions();\n//         fetchStatistics();\n//         fetchChartData();\n//     }, [selectedMonth, searchTerm, page]);\n\n//     const fetchTransactions = async () => {\n//         const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/roxiler?month=${selectedMonth}&page=${page}&search=${searchTerm}`);\n//         const data = await response.json();\n//         setTransactions(data);\n//     };\n\n//     const fetchStatistics = async () => {\n//         const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/chart?month=${selectedMonth}`);\n//         const data = await response.json();\n//         setStats(data[0]);\n//     };\n\n//     const fetchChartData = async () => {\n//         const response = await fetch(`https://6652d7f9813d78e6d6d65e3d.mockapi.io/v1/chartDatas?month=${selectedMonth}`);\n//         const data = await response.json();\n//         setChartData(data[0]);\n//     };\n\n//     const handleSearch = (event) => {\n//         setSearchTerm(event.target.value);\n//         setPage(1); // Reset to first page on new search\n//     };\n\n//     const handleMonthChange = (event) => {\n//         setSelectedMonth(event.target.value);\n//         setPage(1); // Reset to first page on month change\n//     };\n\n//     const renderTransactions = () => {\n//         const startIndex = (page - 1) * transactionsPerPage;\n//         const endIndex = startIndex + transactionsPerPage;\n//         return transactions.slice(startIndex, endIndex).map(transaction => (\n//             <tr key={transaction.id}>\n//                 <td>{transaction.id}</td>\n//                 <td>{transaction.title}</td>\n//                 <td>{transaction.description}</td>\n//                 <td>{transaction.price}</td>\n//                 <td>{transaction.category}</td>\n//                 <td>{transaction.sold}</td>\n//                 <td><img src={transaction.image} alt={transaction.title} width=\"50\" /></td>\n//             </tr>\n//         ));\n//     };\n\n//     return (\n//         <div>\n//             <h2>Transaction Dashboard</h2>\n//             <div>\n//                 <input\n//                     type=\"text\"\n//                     placeholder=\"Search transaction\"\n//                     value={searchTerm}\n//                     onChange={handleSearch}\n//                 />\n//                 <select value={selectedMonth} onChange={handleMonthChange}>\n//                     {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(month => (\n//                         <option key={month} value={month}>{month}</option>\n//                     ))}\n//                 </select>\n//             </div>\n//             <div>\n//                 <h3>Statistics - {selectedMonth}</h3>\n//                 <p>Total sale: {stats.totalSale}</p>\n//                 <p>Total sold items: {stats.totalSoldItems}</p>\n//                 <p>Total not sold items: {stats.totalNotSoldItems}</p>\n//                 {console.log(chartData)}\n//             </div>\n//             <div> \n//                 <h3>Bar Chart Stats - {selectedMonth}</h3>\n//                 <ResponsiveContainer width=\"100%\" height={300}>\n//                     <BarChart data={chartData}>\n//                         <CartesianGrid strokeDasharray=\"3 3\" />\n//                         <XAxis dataKey=\"priceRange\" />\n//                         <YAxis />\n//                         <Tooltip />\n//                         <Bar dataKey=\"count\" fill=\"#8884d8\" />\n//                     </BarChart>\n//                 </ResponsiveContainer>\n//                  </div>\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>ID</th>\n//                         <th>Title</th>\n//                         <th>Description</th>\n//                         <th>Price</th>\n//                         <th>Category</th>\n//                         <th>Sold</th>\n//                         <th>Image</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {renderTransactions()}\n//                 </tbody>\n//             </table>\n//             <div>\n//                 <button onClick={() => setPage(page > 1 ? page - 1 : 1)}>Previous</button>\n//                 <span>Page No: {page}</span>\n//                 <button onClick={() => setPage(page + 1)}>Next</button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default TransactionDashboard;\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionDashboard = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [selectedMonth, setSelectedMonth] = useState('March');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [page, setPage] = useState(1);\n  const [stats, setStats] = useState({\n    totalSale: 0,\n    totalSoldItems: 0,\n    totalNotSoldItems: 0\n  });\n  const [chartData, setChartData] = useState([]);\n  const transactionsPerPage = 3;\n  useEffect(() => {\n    fetchTransactions();\n    fetchStatistics();\n    fetchChartData();\n  }, [selectedMonth, searchTerm, page]);\n  const fetchTransactions = async () => {\n    const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/roxiler?month=${selectedMonth}&page=${page}&search=${searchTerm}`);\n    const data = await response.json();\n    setTransactions(data);\n  };\n  const fetchStatistics = async () => {\n    const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/chart?month=${selectedMonth}`);\n    const data = await response.json();\n    setStats(data[0]);\n  };\n  const fetchChartData = async () => {\n    const response = await fetch(`https://6652d7f9813d78e6d6d65e3d.mockapi.io/v1/chartDatas?month=${selectedMonth}`);\n    const data = await response.json();\n    const chartData = [{\n      priceRange: '0-100',\n      count: data['0-100']\n    }, {\n      priceRange: '101-200',\n      count: data['101-200']\n    }, {\n      priceRange: '201-300',\n      count: data['201-300']\n    }, {\n      priceRange: '301-400',\n      count: data['301-400']\n    }, {\n      priceRange: '401-500',\n      count: data['401-500']\n    }, {\n      priceRange: '501-600',\n      count: data['501-600']\n    }, {\n      priceRange: '601-700',\n      count: data['601-700']\n    }, {\n      priceRange: '701-800',\n      count: data['701-800']\n    }, {\n      priceRange: '801-900',\n      count: data['801-900']\n    }, {\n      priceRange: '901-above',\n      count: data['901-above']\n    }];\n    setChartData(chartData);\n  };\n  const handleSearch = event => {\n    setSearchTerm(event.target.value);\n    setPage(1); // Reset to first page on new search\n  };\n  const handleMonthChange = event => {\n    setSelectedMonth(event.target.value);\n    setPage(1); // Reset to first page on month change\n  };\n  const renderTransactions = () => {\n    const startIndex = (page - 1) * transactionsPerPage;\n    const endIndex = startIndex + transactionsPerPage;\n    return transactions.slice(startIndex, endIndex).map(transaction => /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: transaction.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: transaction.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: transaction.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: transaction.price\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: transaction.category\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: transaction.sold\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: transaction.image,\n          alt: transaction.title,\n          width: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }, this)]\n    }, transaction.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Transaction Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search transaction\",\n        value: searchTerm,\n        onChange: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedMonth,\n        onChange: handleMonthChange,\n        children: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(month => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: month,\n          children: month\n        }, month, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Statistics - \", selectedMonth]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total sale: \", stats.totalSale]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total sold items: \", stats.totalSoldItems]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total not sold items: \", stats.totalNotSoldItems]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Bar Chart Stats - \", selectedMonth]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 300,\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          data: chartData,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"priceRange\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: \"count\",\n            fill: \"#8884d8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Sold\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: renderTransactions()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPage(page > 1 ? page - 1 : 1),\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Page No: \", page]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPage(page + 1),\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 9\n  }, this);\n};\n_s(TransactionDashboard, \"lgjx3VvN2SwuhDNxJSNDjNAjkKg=\");\n_c = TransactionDashboard;\nexport default TransactionDashboard;\nvar _c;\n$RefreshReg$(_c, \"TransactionDashboard\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","jsxDEV","_jsxDEV","TransactionDashboard","_s","transactions","setTransactions","selectedMonth","setSelectedMonth","searchTerm","setSearchTerm","page","setPage","stats","setStats","totalSale","totalSoldItems","totalNotSoldItems","chartData","setChartData","transactionsPerPage","fetchTransactions","fetchStatistics","fetchChartData","response","fetch","data","json","priceRange","count","handleSearch","event","target","value","handleMonthChange","renderTransactions","startIndex","endIndex","slice","map","transaction","children","id","fileName","_jsxFileName","lineNumber","columnNumber","title","description","price","category","sold","src","image","alt","width","type","placeholder","onChange","month","height","strokeDasharray","dataKey","fill","onClick","_c","$RefreshReg$"],"sources":["/home/prince/Desktop/roxiler/src/Components/TransactionTable.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react';\n// // import TransactionStatistics from './TransactionStatistics';\n// // import TransactionBarChart from './TransactionBarChart';\n\n// // const TransactionTable = () => {\n// //     const [transactions, setTransactions] = useState([]);\n// //     const [selectedMonth, setSelectedMonth] = useState('March');\n// //     const [searchTerm, setSearchTerm] = useState('');\n// //     const [page, setPage] = useState(1);\n// //     const transactionsPerPage = 3;\n\n// //     useEffect(() => {\n// //         fetchTransactions();\n// //     }, [selectedMonth, searchTerm, page]);\n\n// //     const fetchTransactions = async () => {\n// //         const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/roxiler?month=${selectedMonth}&page=${page}&search=${searchTerm}`);\n// //         const data = await response.json();\n// //         setTransactions(data);\n// //     };\n\n// //     const handleSearch = (event) => {\n// //         setSearchTerm(event.target.value);\n// //         setPage(1); // Reset to first page on new search\n// //     };\n\n// //     const handleMonthChange = (event) => {\n// //         setSelectedMonth(event.target.value);\n// //         setPage(1); // Reset to first page on month change\n// //     };\n\n// //     const renderTransactions = () => {\n// //         const startIndex = (page - 1) * transactionsPerPage;\n// //         const endIndex = startIndex + transactionsPerPage;\n// //         return transactions.slice(startIndex, endIndex).map(transaction => (\n// //             <tr key={transaction.id}>\n// //                 <td>{transaction.id}</td>\n// //                 <td>{transaction.title}</td>\n// //                 <td>{transaction.description}</td>\n// //                 <td>{transaction.price}</td>\n// //                 <td>{transaction.category}</td>\n// //                 <td>{transaction.sold}</td>\n// //                 <td><img src={transaction.image} alt={transaction.title} width=\"50\" /></td>\n// //             </tr>\n// //         ));\n// //     };\n\n// //     return (\n// //         <div>\n// //             <h2>Transaction Dashboard</h2>\n// //             <div>\n// //                 <input\n// //                     type=\"text\"\n// //                     placeholder=\"Search transaction\"\n// //                     value={searchTerm}\n// //                     onChange={handleSearch}\n// //                 />\n// //                 <select value={selectedMonth} onChange={handleMonthChange}>\n// //                     {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(month => (\n// //                         <option key={month} value={month}>{month}</option>\n// //                     ))}\n// //                 </select>\n// //             </div>\n// //             <TransactionStatistics selectedMonth={selectedMonth} />\n// //             <TransactionBarChart selectedMonth={selectedMonth} />\n// //             <table>\n// //                 <thead>\n// //                     <tr>\n// //                         <th>ID</th>\n// //                         <th>Title</th>\n// //                         <th>Description</th>\n// //                         <th>Price</th>\n// //                         <th>Category</th>\n// //                         <th>Sold</th>\n// //                         <th>Image</th>\n// //                     </tr>\n// //                 </thead>\n// //                 <tbody>\n// //                     {renderTransactions()}\n// //                 </tbody>\n// //             </table>\n// //             <div>\n// //                 <button onClick={() => setPage(page > 1 ? page - 1 : 1)}>Previous</button>\n// //                 <span>Page No: {page}</span>\n// //                 <button onClick={() => setPage(page + 1)}>Next</button>\n// //             </div>\n// //         </div>\n// //     );\n// // };\n\n// // export default TransactionTable;\n\n// import React, { useState, useEffect } from 'react';\n// import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\n// const TransactionDashboard = () => {\n//     const [transactions, setTransactions] = useState([]);\n//     const [selectedMonth, setSelectedMonth] = useState('March');\n//     const [searchTerm, setSearchTerm] = useState('');\n//     const [page, setPage] = useState(1);\n//     const [stats, setStats] = useState({ totalSale: 0, totalSoldItems: 0, totalNotSoldItems: 0 });\n//     const [chartData, setChartData] = useState([]);\n//     const transactionsPerPage = 3;\n\n//     useEffect(() => {\n//         fetchTransactions();\n//         fetchStatistics();\n//         fetchChartData();\n//     }, [selectedMonth, searchTerm, page]);\n\n//     const fetchTransactions = async () => {\n//         const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/roxiler?month=${selectedMonth}&page=${page}&search=${searchTerm}`);\n//         const data = await response.json();\n//         setTransactions(data);\n//     };\n\n//     const fetchStatistics = async () => {\n//         const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/chart?month=${selectedMonth}`);\n//         const data = await response.json();\n//         setStats(data[0]);\n//     };\n\n//     const fetchChartData = async () => {\n//         const response = await fetch(`https://6652d7f9813d78e6d6d65e3d.mockapi.io/v1/chartDatas?month=${selectedMonth}`);\n//         const data = await response.json();\n//         setChartData(data[0]);\n//     };\n\n//     const handleSearch = (event) => {\n//         setSearchTerm(event.target.value);\n//         setPage(1); // Reset to first page on new search\n//     };\n\n//     const handleMonthChange = (event) => {\n//         setSelectedMonth(event.target.value);\n//         setPage(1); // Reset to first page on month change\n//     };\n\n//     const renderTransactions = () => {\n//         const startIndex = (page - 1) * transactionsPerPage;\n//         const endIndex = startIndex + transactionsPerPage;\n//         return transactions.slice(startIndex, endIndex).map(transaction => (\n//             <tr key={transaction.id}>\n//                 <td>{transaction.id}</td>\n//                 <td>{transaction.title}</td>\n//                 <td>{transaction.description}</td>\n//                 <td>{transaction.price}</td>\n//                 <td>{transaction.category}</td>\n//                 <td>{transaction.sold}</td>\n//                 <td><img src={transaction.image} alt={transaction.title} width=\"50\" /></td>\n//             </tr>\n//         ));\n//     };\n\n//     return (\n//         <div>\n//             <h2>Transaction Dashboard</h2>\n//             <div>\n//                 <input\n//                     type=\"text\"\n//                     placeholder=\"Search transaction\"\n//                     value={searchTerm}\n//                     onChange={handleSearch}\n//                 />\n//                 <select value={selectedMonth} onChange={handleMonthChange}>\n//                     {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(month => (\n//                         <option key={month} value={month}>{month}</option>\n//                     ))}\n//                 </select>\n//             </div>\n//             <div>\n//                 <h3>Statistics - {selectedMonth}</h3>\n//                 <p>Total sale: {stats.totalSale}</p>\n//                 <p>Total sold items: {stats.totalSoldItems}</p>\n//                 <p>Total not sold items: {stats.totalNotSoldItems}</p>\n//                 {console.log(chartData)}\n//             </div>\n//             <div> \n//                 <h3>Bar Chart Stats - {selectedMonth}</h3>\n//                 <ResponsiveContainer width=\"100%\" height={300}>\n//                     <BarChart data={chartData}>\n//                         <CartesianGrid strokeDasharray=\"3 3\" />\n//                         <XAxis dataKey=\"priceRange\" />\n//                         <YAxis />\n//                         <Tooltip />\n//                         <Bar dataKey=\"count\" fill=\"#8884d8\" />\n//                     </BarChart>\n//                 </ResponsiveContainer>\n//                  </div>\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>ID</th>\n//                         <th>Title</th>\n//                         <th>Description</th>\n//                         <th>Price</th>\n//                         <th>Category</th>\n//                         <th>Sold</th>\n//                         <th>Image</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {renderTransactions()}\n//                 </tbody>\n//             </table>\n//             <div>\n//                 <button onClick={() => setPage(page > 1 ? page - 1 : 1)}>Previous</button>\n//                 <span>Page No: {page}</span>\n//                 <button onClick={() => setPage(page + 1)}>Next</button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default TransactionDashboard;\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst TransactionDashboard = () => {\n    const [transactions, setTransactions] = useState([]);\n    const [selectedMonth, setSelectedMonth] = useState('March');\n    const [searchTerm, setSearchTerm] = useState('');\n    const [page, setPage] = useState(1);\n    const [stats, setStats] = useState({ totalSale: 0, totalSoldItems: 0, totalNotSoldItems: 0 });\n    const [chartData, setChartData] = useState([]);\n    const transactionsPerPage = 3;\n\n    useEffect(() => {\n        fetchTransactions();\n        fetchStatistics();\n        fetchChartData();\n    }, [selectedMonth, searchTerm, page]);\n\n    const fetchTransactions = async () => {\n        const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/roxiler?month=${selectedMonth}&page=${page}&search=${searchTerm}`);\n        const data = await response.json();\n        setTransactions(data);\n    };\n\n    const fetchStatistics = async () => {\n        const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/chart?month=${selectedMonth}`);\n        const data = await response.json();\n        setStats(data[0]);\n    };\n\n    const fetchChartData = async () => {\n        const response = await fetch(`https://6652d7f9813d78e6d6d65e3d.mockapi.io/v1/chartDatas?month=${selectedMonth}`);\n        const data = await response.json();\n        const chartData = [\n            { priceRange: '0-100', count: data['0-100'] },\n            { priceRange: '101-200', count: data['101-200'] },\n            { priceRange: '201-300', count: data['201-300'] },\n            { priceRange: '301-400', count: data['301-400'] },\n            { priceRange: '401-500', count: data['401-500'] },\n            { priceRange: '501-600', count: data['501-600'] },\n            { priceRange: '601-700', count: data['601-700'] },\n            { priceRange: '701-800', count: data['701-800'] },\n            { priceRange: '801-900', count: data['801-900'] },\n            { priceRange: '901-above', count: data['901-above'] },\n        ];\n        setChartData(chartData);\n    };\n\n    const handleSearch = (event) => {\n        setSearchTerm(event.target.value);\n        setPage(1); // Reset to first page on new search\n    };\n\n    const handleMonthChange = (event) => {\n        setSelectedMonth(event.target.value);\n        setPage(1); // Reset to first page on month change\n    };\n\n    const renderTransactions = () => {\n        const startIndex = (page - 1) * transactionsPerPage;\n        const endIndex = startIndex + transactionsPerPage;\n        return transactions.slice(startIndex, endIndex).map(transaction => (\n            <tr key={transaction.id}>\n                <td>{transaction.id}</td>\n                <td>{transaction.title}</td>\n                <td>{transaction.description}</td>\n                <td>{transaction.price}</td>\n                <td>{transaction.category}</td>\n                <td>{transaction.sold}</td>\n                <td><img src={transaction.image} alt={transaction.title} width=\"50\" /></td>\n            </tr>\n        ));\n    };\n\n    return (\n        <div>\n            <h2>Transaction Dashboard</h2>\n            <div>\n                <input\n                    type=\"text\"\n                    placeholder=\"Search transaction\"\n                    value={searchTerm}\n                    onChange={handleSearch}\n                />\n                <select value={selectedMonth} onChange={handleMonthChange}>\n                    {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(month => (\n                        <option key={month} value={month}>{month}</option>\n                    ))}\n                </select>\n            </div>\n            <div>\n                <h3>Statistics - {selectedMonth}</h3>\n                <p>Total sale: {stats.totalSale}</p>\n                <p>Total sold items: {stats.totalSoldItems}</p>\n                <p>Total not sold items: {stats.totalNotSoldItems}</p>\n            </div>\n            <div>\n                <h3>Bar Chart Stats - {selectedMonth}</h3>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={chartData}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"priceRange\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Bar dataKey=\"count\" fill=\"#8884d8\" />\n                    </BarChart>\n                </ResponsiveContainer>\n            </div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>Title</th>\n                        <th>Description</th>\n                        <th>Price</th>\n                        <th>Category</th>\n                        <th>Sold</th>\n                        <th>Image</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {renderTransactions()}\n                </tbody>\n            </table>\n            <div>\n                <button onClick={() => setPage(page > 1 ? page - 1 : 1)}>Previous</button>\n                <span>Page No: {page}</span>\n                <button onClick={() => setPage(page + 1)}>Next</button>\n            </div>\n        </div>\n    );\n};\n\nexport default TransactionDashboard;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,EAAEC,GAAG,EAAEC,KAAK,EAAEC,KAAK,EAAEC,aAAa,EAAEC,OAAO,EAAEC,mBAAmB,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpG,MAAMC,oBAAoB,GAAGA,CAAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}