{"ast":null,"code":"var _jsxFileName = \"/home/prince/Desktop/roxiler/src/Components/TransactionStatistics.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionStatistics = ({\n  selectedMonth\n}) => {\n  _s();\n  const [stats, setStats] = useState({\n    totalSale: 0,\n    totalSoldItems: 0,\n    totalNotSoldItems: 0\n  });\n  useEffect(() => {\n    const fetchStatistics = async () => {\n      try {\n        const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/chart?month=${selectedMonth}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch statistics');\n        }\n        const data = await response.json();\n        setStats(data);\n      } catch (error) {\n        // Handle fetch error\n        console.error('Error fetching statistics:', error);\n        // Set default statistics or handle error state accordingly\n        setStats({\n          totalSale: 0,\n          totalSoldItems: 0,\n          totalNotSoldItems: 0\n        });\n      }\n    };\n    fetchStatistics();\n  }, [selectedMonth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Statistics - \", selectedMonth]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total sale: \", stats.totalSale]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total sold items: \", stats.totalSoldItems]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total not sold items: \", stats.totalNotSoldItems]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n_s(TransactionStatistics, \"yMvpyu6Hoi4Dz06U6nm/F2oLvhI=\");\n_c = TransactionStatistics;\nexport default TransactionStatistics;\nvar _c;\n$RefreshReg$(_c, \"TransactionStatistics\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","TransactionStatistics","selectedMonth","_s","stats","setStats","totalSale","totalSoldItems","totalNotSoldItems","fetchStatistics","response","fetch","ok","Error","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/prince/Desktop/roxiler/src/Components/TransactionStatistics.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst TransactionStatistics = ({ selectedMonth }) => {\n    const [stats, setStats] = useState({ totalSale: 0, totalSoldItems: 0, totalNotSoldItems: 0 });\n    useEffect(() => {\n        const fetchStatistics = async () => {\n            try {\n                const response = await fetch(`https://664c7d2a35bbda10988094cc.mockapi.io/task1/chart?month=${selectedMonth}`);\n                \n                if (!response.ok) {\n                    throw new Error('Failed to fetch statistics');\n                }\n                \n                const data = await response.json();\n                setStats(data);\n            } catch (error) {\n                // Handle fetch error\n                console.error('Error fetching statistics:', error);\n                // Set default statistics or handle error state accordingly\n                setStats({ totalSale: 0, totalSoldItems: 0, totalNotSoldItems: 0 });\n            }\n        };\n    \n        fetchStatistics();\n    }, [selectedMonth]);\n    \n\n    return (\n        <div>\n            <h3>Statistics - {selectedMonth}</h3>\n            <p>Total sale: {stats.totalSale}</p>\n            <p>Total sold items: {stats.totalSoldItems}</p>\n            <p>Total not sold items: {stats.totalNotSoldItems}</p>\n        </div>\n    );\n};\n\nexport default TransactionStatistics;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,qBAAqB,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC;IAAEQ,SAAS,EAAE,CAAC;IAAEC,cAAc,EAAE,CAAC;IAAEC,iBAAiB,EAAE;EAAE,CAAC,CAAC;EAC7FX,SAAS,CAAC,MAAM;IACZ,MAAMY,eAAe,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iEAAiET,aAAa,EAAE,CAAC;QAE9G,IAAI,CAACQ,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;QACjD;QAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCV,QAAQ,CAACS,IAAI,CAAC;MAClB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZ;QACAC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClD;QACAX,QAAQ,CAAC;UAAEC,SAAS,EAAE,CAAC;UAAEC,cAAc,EAAE,CAAC;UAAEC,iBAAiB,EAAE;QAAE,CAAC,CAAC;MACvE;IACJ,CAAC;IAEDC,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,CAACP,aAAa,CAAC,CAAC;EAGnB,oBACIF,OAAA;IAAAkB,QAAA,gBACIlB,OAAA;MAAAkB,QAAA,GAAI,eAAa,EAAChB,aAAa;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrCtB,OAAA;MAAAkB,QAAA,GAAG,cAAY,EAACd,KAAK,CAACE,SAAS;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpCtB,OAAA;MAAAkB,QAAA,GAAG,oBAAkB,EAACd,KAAK,CAACG,cAAc;IAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/CtB,OAAA;MAAAkB,QAAA,GAAG,wBAAsB,EAACd,KAAK,CAACI,iBAAiB;IAAA;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrD,CAAC;AAEd,CAAC;AAACnB,EAAA,CAjCIF,qBAAqB;AAAAsB,EAAA,GAArBtB,qBAAqB;AAmC3B,eAAeA,qBAAqB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}